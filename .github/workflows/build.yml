name: Build Weather CLI Tool

on:
  push:
    branches:
      - main  # Trigger on push to main branch

jobs:
  build:
    runs-on: self-hosted  # Use the self-hosted runner for the build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use system-installed Python 3.9
        run: |
          echo "Using system-installed Python 3.9..."
          # Ensure that Python 3.9 is being used
          python3.9 --version  # Check Python version
          pip3.9 install --upgrade pip  # Ensure pip is upgraded
          pip3.9 install requests  # Install dependencies directly
          pip3.9 install pyinstaller  # Install PyInstaller for building binary
  
      - name: Build the project
        run: |
          pyinstaller --onefile weather.py  # Convert script into an executable

      - name: Tag the build with version (based on git tag or commit)
        id: tag_build
        run: |
          # Extract the tag or commit hash (if tag exists)
          if [[ -n "${GITHUB_REF##refs/tags/*}" ]]; then
            TAG_NAME="build-$(date +%Y%m%d%H%M%S)"  # If no tag, use timestamp
          else
            TAG_NAME="${GITHUB_REF##refs/tags/}"  # Extract tag from ref
          fi
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV  # Set tag name as environment variable

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: weather-tool
          path: dist/weather  # Upload actual binary

  deploy:
    runs-on: self-hosted  # Ensure deployment happens on self-hosted runner
    needs: build  # Ensure the 'deploy' job runs only after the build job completes

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: weather-tool
          path: ./artifact

      - name: Deploy to remote server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
          DESTINATION_FOLDER: /home/Result  # Path on the remote server where the file will be deployed
          BUILD_TAG: ${{ env.TAG_NAME }}  # Using the tag set in the build job
        run: |
          echo "Deploying binary to remote server..."
          
          # Print the SERVER_IP to check if it's being passed correctly
          echo "Server IP: $SERVER_IP"

          # Create the SSH directory and add the private key
          mkdir -p ~/.ssh
          echo "$SERVER_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa  # Set permissions for the private key file
        
          # Add the server to known hosts to prevent SSH warnings
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
          
          # Verify the artifact exists
          ls -lah ./artifact

          # Define versioned build filename based on the tag
          BUILD_NAME="weather_${BUILD_TAG}.tar.gz"  # Format tag for filename

          # Debug: Check the known_hosts file content
          echo "Updated known_hosts content:"
          cat ~/.ssh/known_hosts
          
          # Use SCP to copy the built binary to the remote server with the tag-based name
          scp -i ~/.ssh/id_rsa ./artifact/weather $SERVER_USER@$SERVER_IP:$DESTINATION_FOLDER/$BUILD_NAME

          # Optional: Log into the server and set correct permissions
          ssh -i ~/.ssh/id_rsa $SERVER_USER@$SERVER_IP "chmod +x $DESTINATION_FOLDER/$BUILD_NAME"

