name: Build Weather CLI Tool

on:
  push:
    branches:
      - main  # Trigger the workflow on pushes to the 'main' branch

jobs:
  build:
    runs-on: self-hosted  # Ensure it runs on your self-hosted runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Python 3.9 from system
        run: |
          echo "Setting up Python 3.9 from the system..."
          export PATH="/usr/local/bin:$PATH"  # Adjust this if necessary
          python3.9 --version  # Verify python version
          pip3.9 install --upgrade pip  # Ensure pip is upgraded

      - name: Install dependencies
        run: |
          pip3.9 install -r requirements.txt  # Ensure dependencies are installed
          pip3.9 install pyinstaller  # Install PyInstaller

      - name: Build the project
        run: |
          pyinstaller --onefile weather.py  # Convert script into an executable

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: weather-tool
          path: dist/weather  # Upload actual binary

  deploy:
    runs-on: self-hosted
    needs: build  # Ensure the 'deploy' job runs only after the build job completes

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: weather-tool
          path: ./artifact

      - name: Deploy to remote server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
          DESTINATION_FOLDER: /home/Result  # Path on the remote server where the file will be deployed
        run: |
          echo "Deploying binary to remote server..."
          
          # Create the SSH directory and add the private key
          mkdir -p ~/.ssh
          echo "$SERVER_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa  # Set permissions for the private key file
          
          # Add the server to known hosts to prevent SSH warnings
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
          
          # Verify the artifact exists
          ls -lah ./artifact
          
          # Use SCP to copy the built binary to the remote server
          scp ./artifact/weather $SERVER_USER@$SERVER_IP:$DESTINATION_FOLDER

